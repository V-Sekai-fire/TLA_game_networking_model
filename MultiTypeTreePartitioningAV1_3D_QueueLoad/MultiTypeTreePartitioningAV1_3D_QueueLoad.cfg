SPECIFICATION Spec

MaxNumRegionsInModel = 15
RootDims         = <<16,16,16>>
ChildOctreeDims  = <<RootDims[1]/2, RootDims[2]/2, RootDims[3]/2>>
ChildPrismXDims  = <<RootDims[1]/2, RootDims[2], RootDims[3]>>
ChildPrismYDims  = <<RootDims[1], RootDims[2]/2, RootDims[3]>>
ChildPrismZDims  = <<RootDims[1], RootDims[2], RootDims[3]/2>>

RootOctreeChildrenIDs = <<1,2,3,4,5,6,7,8>>
RootBinaryXChildrenIDs = <<9,10>>
RootBinaryYChildrenIDs = <<11,12>>
RootBinaryZChildrenIDs = <<13,14>>

CONSTANTS
    MaxDepth = 1
    MinBlockSize = 4
    Regions = 0..(MaxNumRegionsInModel - 1)
    RootRegion = 0

    MaxEntitiesPerCell = 50
    MinEntitiesForMerge = 10

    MaxQueueLengthPerCell = 8
    MinQueueLengthForMerge = 2

    TaskImpact_Common = 1
    TaskImpact_Rare = 5

    CellProcessingCapacity = 3
    BaselineEntities = 5

GetRegionShape(r) ==
    IF r = RootRegion THEN "Cube"
    ELSE IF r \in AsSet(RootOctreeChildrenIDs) THEN "Cube"
    ELSE IF r \in AsSet(RootBinaryXChildrenIDs) THEN "RectPrism"
    ELSE IF r \in AsSet(RootBinaryYChildrenIDs) THEN "RectPrism"
    ELSE IF r \in AsSet(RootBinaryZChildrenIDs) THEN "RectPrism"
    ELSE "Cube"

GetRegionDimensions(r) ==
    IF r = RootRegion THEN RootDims
    ELSE IF r \in AsSet(RootOctreeChildrenIDs) THEN ChildOctreeDims
    ELSE IF r \in AsSet(RootBinaryXChildrenIDs) THEN ChildPrismXDims
    ELSE IF r \in AsSet(RootBinaryYChildrenIDs) THEN ChildPrismYDims
    ELSE IF r \in AsSet(RootBinaryZChildrenIDs) THEN ChildPrismZDims
    ELSE <<MinBlockSize, MinBlockSize, MinBlockSize>>

SplitFunction(r, s) ==
    IF r = RootRegion THEN
        CASE s = "OctreeSplit"  -> IF RootDims[1]/2 >= MinBlockSize THEN RootOctreeChildrenIDs ELSE << >>
           [] s = "BinarySplitX" -> IF RootDims[1]/2 >= MinBlockSize THEN RootBinaryXChildrenIDs ELSE << >>
           [] s = "BinarySplitY" -> IF RootDims[2]/2 >= MinBlockSize THEN RootBinaryYChildrenIDs ELSE << >>
           [] s = "BinarySplitZ" -> IF RootDims[3]/2 >= MinBlockSize THEN RootBinaryZChildrenIDs ELSE << >>
           [] OTHER -> << >>
    ELSE << >>

RegionsCover(regionSet, targetRegion) = TRUE
RegionsDisjoint(regionSet) = TRUE
RegionContainedIn(region1, region2) = TRUE

INVARIANT TypeOK
INVARIANT Invariant_CellStructure
INVARIANT Invariant_ActivePartitionProperties
INVARIANT Invariant_RegionProperties
INVARIANT Invariant_BlockMinSize
INVARIANT Invariant_OverloadManagement

CHECK_DEADLOCK TRUE
